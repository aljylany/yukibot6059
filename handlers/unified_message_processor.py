"""
ูุนุงูุฌ ุงูุฑุณุงุฆู ุงูููุญุฏ - Unified Message Processor
ูุธุงู ููุญุฏ ููุนุงูุฌุฉ ุฌููุน ุฃููุงุน ุงูุฑุณุงุฆู
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from utils.decorators import group_only

router = Router()

class UnifiedMessageProcessor:
    """ูุนุงูุฌ ุงูุฑุณุงุฆู ุงูููุญุฏ - ูุนุงูุฌุฉ ุจุณูุทุฉ ููุฑุณุงุฆู"""
    
    def __init__(self):
        self.processing_lock = {}  # ูููุน ุงููุนุงูุฌุฉ ุงููุชูุฑุฑุฉ
        
    async def process_any_message(self, message: Message) -> bool:
        """
        ูุนุงูุฌ ููุญุฏ ูุฌููุน ุฃููุงุน ุงูุฑุณุงุฆู
        Returns False - ูุง ููุฌุฏ ูุญุต ุญุงููุง
        """
        try:
            # ููุน ุงููุนุงูุฌุฉ ุงููุชูุฑุฑุฉ
            message_key = f"{message.chat.id}:{message.message_id}"
            if message_key in self.processing_lock:
                return False
            
            self.processing_lock[message_key] = True
            
            try:
                # ุงูุชุญูู ูู ุฃู ุงูุฑุณุงูุฉ ูู ูุฌููุนุฉ
                if message.chat.type not in ['group', 'supergroup']:
                    return False
                
                # ุงูุชุญูู ูู ูุฌูุฏ ูุนูููุงุช ุงููุณุชุฎุฏู
                if not message.from_user:
                    return False
                
                # ุชุณุฌูู ุชูุงุตูู ุงูุฑุณุงูุฉ
                content_type = self._get_content_type(message)
                user_name = message.from_user.first_name or "ูุฌููู"
                
                logging.info(f"๐ ุฑุณุงูุฉ {content_type} ูู {user_name} (ID: {message.from_user.id})")
                
                # ูุง ููุฌุฏ ูุญุต - ุงูุณูุงุญ ุจุฌููุน ุงูุฑุณุงุฆู
                return False
                
            finally:
                # ุฅุฒุงูุฉ ุงูููู
                self.processing_lock.pop(message_key, None)
                
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ูู ุงููุนุงูุฌ ุงูููุญุฏ: {e}")
            return False
    
    def _get_content_type(self, message: Message) -> str:
        """ุชุญุฏูุฏ ููุน ุงููุญุชูู"""
        if message.text:
            return "ูุต"
        elif message.photo:
            return "ุตูุฑุฉ"
        elif message.video:
            return "ููุฏูู"
        elif message.sticker:
            return "ููุตู"
        elif message.animation:
            return "ุฑุณู ูุชุญุฑู"
        elif message.document:
            return "ููู"
        elif message.voice:
            return "ุฑุณุงูุฉ ุตูุชูุฉ"
        elif message.video_note:
            return "ููุฏูู ุฏุงุฆุฑู"
        else:
            return "ูุญุชูู ุบูุฑ ูุนุฑูู"

# ุฅูุดุงุก ุงููุนุงูุฌ ุงูููุญุฏ
unified_processor = UnifiedMessageProcessor()

# ูุนุงูุฌุงุช ูุฌููุน ุฃููุงุน ุงูุฑุณุงุฆู
@router.message(F.text)
@group_only
async def handle_text_messages(message: Message):
    """ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ"""
    # ุชุญูู ูู ุฑุณุงุฆู ูููู ุงูุฐูู - ูุง ุชุนุงูุฌูุง ููุง
    if message.text:
        yuki_triggers = ['ูููู', 'yuki', 'ูููู']
        if any(trigger in message.text.lower() for trigger in yuki_triggers):
            # ุงุชุฑู ุฑุณุงุฆู ูููู ูููุนุงูุฌ ุงููุฎุตุต ูู messages.py
            return
    
    await unified_processor.process_any_message(message)

@router.message(F.photo)
@group_only
async def handle_photo_messages(message: Message):
    """ูุนุงูุฌ ุงูุตูุฑ"""
    await unified_processor.process_any_message(message)

@router.message(F.video)
@group_only
async def handle_video_messages(message: Message):
    """ูุนุงูุฌ ุงูููุฏูููุงุช"""
    await unified_processor.process_any_message(message)

@router.message(F.sticker)
@group_only
async def handle_sticker_messages(message: Message):
    """ูุนุงูุฌ ุงูููุตูุงุช"""
    await unified_processor.process_any_message(message)

@router.message(F.animation)
@group_only
async def handle_animation_messages(message: Message):
    """ูุนุงูุฌ ุงูุฑุณูู ุงููุชุญุฑูุฉ"""
    await unified_processor.process_any_message(message)

@router.message(F.document)
@group_only
async def handle_document_messages(message: Message):
    """ูุนุงูุฌ ุงููููุงุช"""
    await unified_processor.process_any_message(message)

@router.message(F.voice)
@group_only
async def handle_voice_messages(message: Message):
    """ูุนุงูุฌ ุงูุฑุณุงุฆู ุงูุตูุชูุฉ"""
    await unified_processor.process_any_message(message)

@router.message(F.video_note)
@group_only
async def handle_video_note_messages(message: Message):
    """ูุนุงูุฌ ุงูููุฏูููุงุช ุงูุฏุงุฆุฑูุฉ"""
    await unified_processor.process_any_message(message)

# ูุนุงูุฌ ุดุงูู ูุฃู ุฑุณุงูุฉ ูู ุชุชู ูุนุงูุฌุชูุง
@router.message()
@group_only
async def handle_any_other_message(message: Message):
    """ูุนุงูุฌ ุดุงูู ูุฃู ููุน ุฑุณุงูุฉ ุฃุฎุฑู"""
    await unified_processor.process_any_message(message)

# ุฏุงูุฉ ููุชูุงูู ูุน ุงูุฃูุธูุฉ ุงูุฃุฎุฑู
async def check_message_unified(message: Message) -> bool:
    """
    ุฏุงูุฉ ููุญุฏุฉ ููุญุต ุงูุฑุณุงุฆู - ููุงุณุชุฎุฏุงู ูู ุงูุฃูุธูุฉ ุงูุฃุฎุฑู
    Returns False - ูุง ููุฌุฏ ูุญุต ุญุงููุง
    """
    return await unified_processor.process_any_message(message)