"""
ูุธุงู ุงูุชุณุฌูู ุงููุฏูู ุงููุทูุฑ
Enhanced Manual Registration System
"""

import logging
from datetime import datetime
from typing import Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.operations import execute_query, get_user
from utils.helpers import format_number

# ุฅุนุฏุงุฏ ุงูุชูุฌูู
router = Router()

# ุญุงูุงุช FSM ููุชุณุฌูู
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    choosing_gender = State()
    choosing_country = State()
    choosing_bank = State()
    confirming_registration = State()

# ูุงุฆูุฉ ุงูุจูุฏุงู ุงูุนุฑุจูุฉ
ARAB_COUNTRIES = {
    "๐ธ๐ฆ": "ุงูุณุนูุฏูุฉ",
    "๐ฆ๐ช": "ุงูุฅูุงุฑุงุช",
    "๐ช๐ฌ": "ูุตุฑ",
    "๐ฏ๐ด": "ุงูุฃุฑุฏู",
    "๐ฐ๐ผ": "ุงููููุช",
    "๐ถ๐ฆ": "ูุทุฑ",
    "๐ง๐ญ": "ุงูุจุญุฑูู",
    "๐ด๐ฒ": "ุนูุงู",
    "๐ฑ๐ง": "ูุจูุงู",
    "๐ธ๐พ": "ุณูุฑูุง",
    "๐ฎ๐ถ": "ุงูุนุฑุงู",
    "๐พ๐ช": "ุงูููู",
    "๐ฑ๐พ": "ููุจูุง",
    "๐น๐ณ": "ุชููุณ",
    "๐ฉ๐ฟ": "ุงูุฌุฒุงุฆุฑ",
    "๐ฒ๐ฆ": "ุงููุบุฑุจ",
    "๐ธ๐ฉ": "ุงูุณูุฏุงู",
    "๐ธ๐ด": "ุงูุตููุงู",
    "๐ฉ๐ฏ": "ุฌูุจูุชู",
    "๐ฐ๐ฒ": "ุฌุฒุฑ ุงูููุฑ",
    "๐ฒ๐ท": "ููุฑูุชุงููุง",
    "๐ต๐ธ": "ููุณุทูู"
}

# ุฎูุงุฑุงุช ุงูุฌูุณ
GENDER_OPTIONS = {
    "male": {"emoji": "๐จ", "text": "ุฐูุฑ"},
    "female": {"emoji": "๐ฉ", "text": "ุฃูุซู"}
}

# ุฃููุงุน ุงูุจููู ูุน ูุฒุงูุงูุง
BANK_TYPES = {
    "ุงูุฃููู": {
        "name": "ุงูุจูู ุงูุฃููู",
        "emoji": "๐๏ธ",
        "initial_bonus": 2000,
        "daily_salary": (100, 200),
        "interest_rate": 0.03,
        "description": "ุจูู ุชูููุฏู ุจููุงูุขุช ุนุงููุฉ"
    },
    "ุงูุฑุงุฌุญู": {
        "name": "ูุตุฑู ุงูุฑุงุฌุญู", 
        "emoji": "๐ฆ",
        "initial_bonus": 1500,
        "daily_salary": (150, 250),
        "interest_rate": 0.025,
        "description": "ูุตุฑู ุฅุณูุงูู ุจุฃุฑุจุงุญ ุซุงุจุชุฉ"
    },
    "ุณุงูุจุง": {
        "name": "ุจูู ุณุงูุจุง",
        "emoji": "๐ณ",
        "initial_bonus": 1800,
        "daily_salary": (120, 180),
        "interest_rate": 0.035,
        "description": "ุจูู ุญุฏูุซ ุจููุงุฆุฏ ูุฑุชูุนุฉ"
    },
    "ุงูุฑูุงุถ": {
        "name": "ุจูู ุงูุฑูุงุถ",
        "emoji": "๐ข",
        "initial_bonus": 1600,
        "daily_salary": (130, 200),
        "interest_rate": 0.028,
        "description": "ุจูู ูุชูุงุฒู ููุฌููุน"
    }
}


async def is_user_registered(user_id: int) -> bool:
    """ุงูุชุญูู ูู ุชุณุฌูู ุงููุณุชุฎุฏู"""
    try:
        user = await get_user(user_id)
        return user.get('is_registered', False) if user else False
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ูุญุต ุชุณุฌูู ุงููุณุชุฎุฏู {user_id}: {e}")
        return False


async def create_unregistered_user(user_id: int, username: str = "", first_name: str = "") -> bool:
    """ุฅูุดุงุก ูุณุชุฎุฏู ุบูุฑ ูุณุฌู (ููุชุชุจุน ุงูุฃุณุงุณู ููุท)"""
    try:
        import aiosqlite
        # ุงุณุชุฎุฏุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ ูุจุงุดุฑุฉ
        DATABASE_URL = "bot_database.db"
        
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                """
                INSERT OR IGNORE INTO users (user_id, username, first_name, is_registered, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?)
                """,
                (user_id, username or "", first_name or "", False, 
                 datetime.now().isoformat(), datetime.now().isoformat())
            )
            await db.commit()
        return True
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุชุฎุฏู ุบูุฑ ุงููุณุฌู {user_id}: {e}")
        return False


async def complete_user_registration(user_id: int, full_name: str, gender: str, 
                                   country: str, bank_type: str) -> bool:
    """ุฅููุงู ุชุณุฌูู ุงููุณุชุฎุฏู"""
    try:
        bank_info = BANK_TYPES[bank_type]
        
        import aiosqlite
        # ุงุณุชุฎุฏุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ ูุจุงุดุฑุฉ
        DATABASE_URL = "bot_database.db"
        
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                """
                UPDATE users SET 
                    first_name = ?, gender = ?, country = ?, bank_type = ?,
                    is_registered = ?, balance = ?, bank_balance = ?,
                    updated_at = ?
                WHERE user_id = ?
                """,
                (full_name, gender, country, bank_type, True, 
                 bank_info['initial_bonus'], 0, 
                 datetime.now().isoformat(), user_id)
            )
            await db.commit()
        
        # ุฅุถุงูุฉ ูุนุงููุฉ ุงูููุงูุฃุฉ
        try:
            from database.operations import add_transaction
            await add_transaction(
                user_id=user_id,
                transaction_type="registration_bonus", 
                amount=bank_info['initial_bonus'],
                description=f"ููุงูุฃุฉ ุงูุชุณุฌูู - {bank_info['name']}"
            )
        except Exception as trans_error:
            logging.warning(f"ุชุนุฐุฑ ุฅุถุงูุฉ ูุนุงููุฉ ุงูุชุณุฌูู: {trans_error}")
        
        logging.info(f"ุชู ุฅููุงู ุชุณุฌูู ุงููุณุชุฎุฏู: {user_id} - {full_name}")
        return True
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅููุงู ุชุณุฌูู ุงููุณุชุฎุฏู {user_id}: {e}")
        return False


async def update_user_missing_data(user_id: int, full_name: str = None, 
                                 gender: str = None, country: str = None) -> bool:
    """ุชุญุฏูุซ ุงูุจูุงูุงุช ุงููุงูุตุฉ ูููุณุชุฎุฏู ุงูููุฌูุฏ"""
    try:
        # ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ุงูุญุงููุฉ
        from database.operations import get_user
        current_user = await get_user(user_id)
        if not current_user:
            return False
        
        # ุฅุนุฏุงุฏ ุงูุจูุงูุงุช ุงููุญุฏุซุฉ
        updated_name = full_name if full_name else current_user.get('first_name', '')
        updated_gender = gender if gender else current_user.get('gender', '')
        updated_country = country if country else current_user.get('country', '')
        
        import aiosqlite
        # ุงุณุชุฎุฏุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ ูุจุงุดุฑุฉ
        DATABASE_URL = "bot_database.db"
        
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                """
                UPDATE users SET 
                    first_name = ?, gender = ?, country = ?, is_registered = ?, updated_at = ?
                WHERE user_id = ?
                """,
                (updated_name, updated_gender, updated_country, True, 
                 datetime.now().isoformat(), user_id)
            )
            await db.commit()
        
        logging.info(f"ุชู ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู: {user_id} - {updated_name}")
        return True
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู {user_id}: {e}")
        return False


def create_registration_keyboard() -> InlineKeyboardMarkup:
    """ุฅูุดุงุก ููุญุฉ ููุงุชูุญ ุงูุชุณุฌูู"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="๐ ุณุฌู ุญุณุงุจ ุฌุฏูุฏ", callback_data="start_registration")]
    ])


def create_gender_keyboard() -> InlineKeyboardMarkup:
    """ุฅูุดุงุก ููุญุฉ ููุงุชูุญ ุงุฎุชูุงุฑ ุงูุฌูุณ"""
    buttons = []
    for key, gender in GENDER_OPTIONS.items():
        buttons.append([InlineKeyboardButton(
            text=f"{gender['emoji']} {gender['text']}", 
            callback_data=f"gender_{key}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_country_keyboard() -> InlineKeyboardMarkup:
    """ุฅูุดุงุก ููุญุฉ ููุงุชูุญ ุงุฎุชูุงุฑ ุงูุจูุฏ"""
    buttons = []
    row = []
    for flag, country in ARAB_COUNTRIES.items():
        row.append(InlineKeyboardButton(
            text=f"{flag} {country}", 
            callback_data=f"country_{country}"
        ))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_bank_keyboard() -> InlineKeyboardMarkup:
    """ุฅูุดุงุก ููุญุฉ ููุงุชูุญ ุงุฎุชูุงุฑ ุงูุจูู"""
    buttons = []
    for bank_key, bank_info in BANK_TYPES.items():
        buttons.append([InlineKeyboardButton(
            text=f"{bank_info['emoji']} {bank_info['name']}", 
            callback_data=f"bank_{bank_key}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def send_registration_required_message(message: Message):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุทูุจ ุงูุชุณุฌูู"""
    welcome_text = """
๐ **ูุฑุญุจุงู ุจู ูู ุจูุช ูููู ุงููุทูุฑ!**

๐จ **ูููุตูู ูููุฒุงุช ุงูุจูุชุ ูุฌุจ ุชุณุฌูู ุญุณุงุจ ุฃููุงู**

๐ **ูุง ุณุชุญุชุงุฌ ูุชูุฏููู:**
โข ๐ ุงูุงุณู ุงููุงูู
โข ๐ค ุงูุฌูุณ (ุฐูุฑ/ุฃูุซู)
โข ๐ ุงูุจูุฏ
โข ๐ฆ ุงูุจูู ุงูููุถู

๐ฐ **ูุฒุงูุง ุงูุชุณุฌูู:**
โข ููุงูุฃุฉ ุชุฑุญูุจ ุชุตู ุฅูู 2000$
โข ุฑุงุชุจ ูููู ูู 100-250$
โข ุฅููุงููุฉ ุงููุตูู ูุฌููุน ุงูุฃูุนุงุจ
โข ูุธุงู ูุตุฑูู ูุชูุงูู
โข ุฅุญุตุงุฆูุงุช ุดุฎุตูุฉ ููุตูุฉ

๐ฏ **ุงุถุบุท ุงูุฒุฑ ุฃุฏูุงู ูุจุฏุก ุงูุชุณุฌูู:**
    """
    
    await message.reply(welcome_text, reply_markup=create_registration_keyboard())


async def send_completion_required_message(message: Message, missing_data: list):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุทูุจ ุฅููุงู ุงูุจูุงูุงุช ุงููุงูุตุฉ"""
    completion_text = f"""
๐ **ุฅููุงู ุจูุงูุงุช ุญุณุงุจู ุงูุจููู**

๐ **ุงูุจูุงูุงุช ุงููุงูุตุฉ:** {', '.join(missing_data)}

๐ก **ููุงุฐุง ูุญุชุงุฌ ูุฐู ุงูุจูุงูุงุชุ**
โข ุชุฎุตูุต ุชุฌุฑุจุชู ูู ุงูุจูุช
โข ุฅุชุงุญุฉ ุงููููุฒุงุช ุงููุงููุฉ 
โข ุฃูุงู ุฃูุถู ูุญุณุงุจู
โข ุฅุญุตุงุฆูุงุช ุดุฎุตูุฉ ุฏูููุฉ

โจ **ุงููููุฒุงุช ุจุนุฏ ุงูุฅููุงู:**
โข ูุตูู ูุงูู ูุฌููุน ุงูุฃูุนุงุจ
โข ููุงูุขุช ุฅุถุงููุฉ ุญุตุฑูุฉ
โข ูุธุงู ุชุฑููุฉ ูุญุณู
โข ุชุฌุฑุจุฉ ุดุฎุตูุฉ ูููุฒุฉ

๐ฏ **ุงุถุบุท ุงูุฒุฑ ุฃุฏูุงู ูุฅููุงู ุจูุงูุงุชู:**
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="๐ ุฅููุงู ุงูุจูุงูุงุช ุงููุงูุตุฉ", callback_data="complete_missing_data")]
    ])
    
    await message.reply(completion_text, reply_markup=keyboard)


@router.callback_query(F.data == "start_registration")
async def start_registration_process(callback: CallbackQuery, state: FSMContext):
    """ุจุฏุก ุนูููุฉ ุงูุชุณุฌูู"""
    try:
        await callback.answer("๐ ุจุฏุก ุงูุชุณุฌูู...")
        
        await callback.message.edit_text(
            "๐ **ุฎุทูุฉ 1/4: ุงูุงุณู ุงููุงูู**\n\n"
            "๐ค **ุงูุชุจ ุงุณูู ุงููุงูู:**\n"
            "โข ููุถู ุงูุงุณู ุงูุญูููู\n"
            "โข ุณูุธูุฑ ูู ูููู ุงูุดุฎุตู\n"
            "โข ูููู ุชุบููุฑู ูุงุญูุงู\n\n"
            "โ๏ธ ุงูุชุจ ุงุณูู ุงูุขู:"
        )
        
        await state.set_state(RegistrationStates.waiting_for_name)
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุจุฏุก ุงูุชุณุฌูู: {e}")


@router.message(RegistrationStates.waiting_for_name)
async def handle_name_input(message: Message, state: FSMContext):
    """ูุนุงูุฌุฉ ุฅุฏุฎุงู ุงูุงุณู"""
    try:
        if not message.text or len(message.text.strip()) < 2:
            await message.reply("โ ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุตุญูุญ (ุฃูุซุฑ ูู ุญุฑููู)")
            return
        
        full_name = message.text.strip()
        await state.update_data(full_name=full_name)
        
        # ุงูุชุญูู ุฅุฐุง ูุงู ูุฐุง ุฅููุงู ุจูุงูุงุช ุฃู ุชุณุฌูู ุฌุฏูุฏ
        data = await state.get_data()
        is_completion = data.get('is_completion', False)
        
        if is_completion:
            # ุฅููุงู ุงูุจูุงูุงุช - ูุญุชุงุฌ ููุชุญูู ูู ุงูุจูุงูุงุช ุงููุงูุตุฉ ุงูุฃุฎุฑู
            user = await get_user(message.from_user.id)
            gender = user.get('gender', '') if user else ''
            country = user.get('country', '') if user else ''
            
            if not gender or str(gender).strip() == '':
                await message.reply(
                    f"โ **ุชู ุญูุธ ุงูุงุณู:** {full_name}\n\n"
                    "๐ค **ุงูุจูุงูุงุช ุงููุงูุตุฉ: ุงูุฌูุณ**\n\n"
                    "๐ฝ ุงุฎุชุฑ ุฌูุณู ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู:",
                    reply_markup=create_gender_keyboard()
                )
                await state.set_state(RegistrationStates.choosing_gender)
            elif not country or str(country).strip() == '':
                # ุญูุธ ุงูุงุณู ูุงูุชูุงู ููุจูุฏ
                success = await update_user_missing_data(message.from_user.id, full_name=full_name)
                if not success:
                    await message.reply("โ ุญุฏุซ ุฎุทุฃ ูู ุญูุธ ุงูุจูุงูุงุช")
                    await state.clear()
                    return
                await message.reply(
                    f"โ **ุชู ุญูุธ ุงูุงุณู:** {full_name}\n\n"
                    "๐ **ุงูุจูุงูุงุช ุงููุงูุตุฉ: ุงูุจูุฏ**\n\n"
                    "๐ฝ ุงุฎุชุฑ ุจูุฏู ูู ุงููุงุฆูุฉ ุฃุฏูุงู:",
                    reply_markup=create_country_keyboard()
                )
                await state.set_state(RegistrationStates.choosing_country)
            else:
                # ููุท ุงูุงุณู ูุงูุต - ุชุญุฏูุซ ูุฅููุงุก
                success = await update_user_missing_data(message.from_user.id, full_name=full_name)
                if success:
                    await message.reply(
                        f"โ **ุชู ุฅููุงู ุจูุงูุงุชู ุจูุฌุงุญ!**\n\n"
                        f"๐ **ุงูุงุณู:** {full_name}\n"
                        f"{'๐จ' if gender == 'male' else '๐ฉ' if gender == 'female' else '๐ง'} **ุงูุฌูุณ:** {'ุฐูุฑ' if gender == 'male' else 'ุฃูุซู' if gender == 'female' else gender}\n"
                        f"๐ **ุงูุจูุฏ:** {country}\n\n"
                        "๐ **ุงูุขู ููููู ุงุณุชุฎุฏุงู ุฌููุน ููุฒุงุช ุงูุจูุช!**"
                    )
                else:
                    await message.reply("โ ุญุฏุซ ุฎุทุฃ ูู ุญูุธ ุงูุจูุงูุงุช")
                await state.clear()
        else:
            # ุชุณุฌูู ุฌุฏูุฏ ุนุงุฏู
            await message.reply(
                f"โ **ุชู ุญูุธ ุงูุงุณู:** {full_name}\n\n"
                "๐ค **ุฎุทูุฉ 2/4: ุงูุฌูุณ**\n\n"
                "๐ฝ ุงุฎุชุฑ ุฌูุณู ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู:",
                reply_markup=create_gender_keyboard()
            )
            await state.set_state(RegistrationStates.choosing_gender)
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุงุณู: {e}")


@router.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback: CallbackQuery, state: FSMContext):
    """ูุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงูุฌูุณ"""
    try:
        gender_key = callback.data.split("_")[1]
        gender_info = GENDER_OPTIONS[gender_key]
        
        await state.update_data(gender=gender_key)
        await callback.answer(f"ุชู ุงุฎุชูุงุฑ: {gender_info['text']}")
        
        await callback.message.edit_text(
            f"โ **ุชู ุงุฎุชูุงุฑ ุงูุฌูุณ:** {gender_info['emoji']} {gender_info['text']}\n\n"
            "๐ **ุฎุทูุฉ 3/4: ุงูุจูุฏ**\n\n"
            "๐ฝ ุงุฎุชุฑ ุจูุฏู ูู ุงููุงุฆูุฉ ุฃุฏูุงู:",
            reply_markup=create_country_keyboard()
        )
        
        await state.set_state(RegistrationStates.choosing_country)
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุงุฎุชูุงุฑ ุงูุฌูุณ: {e}")


@router.callback_query(F.data.startswith("country_"))
async def handle_country_selection(callback: CallbackQuery, state: FSMContext):
    """ูุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงูุจูุฏ"""
    try:
        country = callback.data.split("_", 1)[1]
        await state.update_data(country=country)
        
        # ุงูุนุซูุฑ ุนูู ุนูู ุงูุจูุฏ
        country_flag = "๐"
        for flag, name in ARAB_COUNTRIES.items():
            if name == country:
                country_flag = flag
                break
        
        await callback.answer(f"ุชู ุงุฎุชูุงุฑ: {country}")
        
        # ุฅูุดุงุก ูุต ูุนูููุงุช ุงูุจููู
        banks_info = "๐ฆ **ูุนูููุงุช ุงูุจููู ุงููุชุงุญุฉ:**\n\n"
        for bank_key, bank_info in BANK_TYPES.items():
            banks_info += f"{bank_info['emoji']} **{bank_info['name']}**\n"
            banks_info += f"โข ููุงูุฃุฉ ุงูุชุณุฌูู: {format_number(bank_info['initial_bonus'])}$\n"
            banks_info += f"โข ุงูุฑุงุชุจ ุงููููู: {bank_info['daily_salary'][0]}-{bank_info['daily_salary'][1]}$\n"
            banks_info += f"โข ูุนุฏู ุงููุงุฆุฏุฉ: {bank_info['interest_rate']*100:.1f}%\n"
            banks_info += f"โข ุงููุตู: {bank_info['description']}\n\n"
        
        await callback.message.edit_text(
            f"โ **ุชู ุงุฎุชูุงุฑ ุงูุจูุฏ:** {country_flag} {country}\n\n"
            "๐ฆ **ุฎุทูุฉ 4/4: ุงุฎุชูุงุฑ ุงูุจูู**\n\n"
            f"{banks_info}"
            "๐ฝ ุงุฎุชุฑ ุงูุจูู ุงูููุถู ูู:",
            reply_markup=create_bank_keyboard()
        )
        
        await state.set_state(RegistrationStates.choosing_bank)
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุงุฎุชูุงุฑ ุงูุจูุฏ: {e}")


@router.callback_query(F.data.startswith("bank_"))
async def handle_bank_selection(callback: CallbackQuery, state: FSMContext):
    """ูุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงูุจูู ูุฅุชูุงู ุงูุชุณุฌูู"""
    try:
        bank_key = callback.data.split("_", 1)[1]
        bank_info = BANK_TYPES[bank_key]
        
        # ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุชุณุฌูู
        data = await state.get_data()
        full_name = data.get('full_name', '')
        gender = data.get('gender', '')
        country = data.get('country', '')
        
        await callback.answer(f"ุชู ุงุฎุชูุงุฑ: {bank_info['name']}")
        
        # ุฅุชูุงู ุงูุชุณุฌูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        success = await complete_user_registration(
            user_id=callback.from_user.id,
            full_name=full_name,
            gender=gender,
            country=country,
            bank_type=bank_key
        )
        
        if success:
            # ุงูุนุซูุฑ ุนูู ุนูู ุงูุจูุฏ
            country_flag = "๐"
            for flag, name in ARAB_COUNTRIES.items():
                if name == country:
                    country_flag = flag
                    break
            
            gender_emoji = GENDER_OPTIONS.get(gender, {}).get('emoji', '๐ง')
            gender_text = GENDER_OPTIONS.get(gender, {}).get('text', 'ุบูุฑ ูุญุฏุฏ')
            
            success_message = f"""
๐ **ุชู ุฅูุดุงุก ุญุณุงุจู ุจูุฌุงุญ!**

๐ **ูุนูููุงุช ุญุณุงุจู:**
โข ๐ ุงูุงุณู: {full_name}
โข {gender_emoji} ุงูุฌูุณ: {gender_text}
โข {country_flag} ุงูุจูุฏ: {country}
โข {bank_info['emoji']} ุงูุจูู: {bank_info['name']}

๐ฐ **ุงูููุงูุขุช ุงููุณุชููุฉ:**
โข ๐ต ููุงูุฃุฉ ุงูุชุณุฌูู: {format_number(bank_info['initial_bonus'])}$
โข ๐ ุฑุงุชุจ ูููู: {bank_info['daily_salary'][0]}-{bank_info['daily_salary'][1]}$
โข ๐ ูุนุฏู ุงููุงุฆุฏุฉ: {bank_info['interest_rate']*100:.1f}%

๐ฎ **ููููู ุงูุขู:**
โข ุงุณุชุฎุฏุงู ุฌููุน ููุฒุงุช ุงูุจูุช
โข ุงููุนุจ ูุน ุงูุฃุตุฏูุงุก
โข ุชุฏุงูู ุงูุฃุณูู ูุงูุงุณุชุซูุงุฑ
โข ุฅุฏุงุฑุฉ ุฃููุงูู ูุญุณุงุจู ุงููุตุฑูู

๐ **ูุฑุญุจุงู ุจู ูู ุนุงูู ูููู ุงูุงูุชุตุงุฏู!**

๐ก ุงูุชุจ "ุฑุตูุฏ" ูุนุฑุถ ุฑุตูุฏู ุงูุญุงูู
            """
            
            await callback.message.edit_text(success_message)
            
            # ุฅุฑุณุงู ุฅุดุนุงุฑ ููููุงุฉ ุงููุฑุนูุฉ (ุฅู ูุฌุฏุช)
            try:
                from modules.notification_manager import NotificationManager
                notification_manager = NotificationManager(callback.bot)
                await notification_manager.send_new_user_notification(
                    user_id=callback.from_user.id,
                    username=callback.from_user.username or "ุบูุฑ ูุญุฏุฏ",
                    full_name=full_name,
                    country=country,
                    bank=bank_info['name']
                )
            except Exception as notif_error:
                logging.warning(f"ูู ูุชู ุฅุฑุณุงู ุฅุดุนุงุฑ ุงููุณุชุฎุฏู ุงูุฌุฏูุฏ: {notif_error}")
        else:
            await callback.message.edit_text(
                "โ **ุญุฏุซ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุญุณุงุจ**\n\n"
                "๐ ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู\n"
                "ุฃู ุงูุชูุงุตู ูุน ุงูุฏุนู ุงูููู"
            )
        
        # ูุณุญ ุญุงูุฉ ุงูุชุณุฌูู
        await state.clear()
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุงุฎุชูุงุฑ ุงูุจูู: {e}")
        await callback.message.edit_text(
            "โ ุญุฏุซ ุฎุทุฃ ูู ุฅุชูุงู ุงูุชุณุฌูู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู."
        )


@router.callback_query(F.data == "complete_missing_data")
async def start_completion_process(callback: CallbackQuery, state: FSMContext):
    """ุจุฏุก ุนูููุฉ ุฅููุงู ุงูุจูุงูุงุช ุงููุงูุตุฉ"""
    try:
        await callback.answer("๐ ุจุฏุก ุฅููุงู ุงูุจูุงูุงุช...")
        
        # ุงูุญุตูู ุนูู ุจูุงูุงุช ุงููุณุชุฎุฏู ุงูุญุงููุฉ
        user = await get_user(callback.from_user.id)
        
        if not user:
            await callback.message.edit_text("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุญุณุงุจู!")
            return
        
        # ูุญุต ุงูุจูุงูุงุช ุงููุงูุตุฉ
        full_name = user.get('first_name', '') if user else ''
        gender = user.get('gender', '') if user else ''
        country = user.get('country', '') if user else ''
        
        # ุชุญุฏูุฏ ุงูุฎุทูุฉ ุงูุฃููู ุงููุทููุจุฉ
        if not full_name or str(full_name).strip() == '':
            # ุงูุจุฏุก ุจุทูุจ ุงูุงุณู
            await callback.message.edit_text(
                "๐ **ุฅููุงู ุงูุจูุงูุงุช - ุงูุงุณู ุงููุงูู**\n\n"
                "๐ค **ุงูุชุจ ุงุณูู ุงููุงูู:**\n"
                "โข ููุถู ุงูุงุณู ุงูุญูููู\n"
                "โข ุณูุธูุฑ ูู ูููู ุงูุดุฎุตู\n"
                "โข ูููู ุชุบููุฑู ูุงุญูุงู\n\n"
                "โ๏ธ ุงูุชุจ ุงุณูู ุงูุขู:"
            )
            await state.set_data({'is_completion': True})
            await state.set_state(RegistrationStates.waiting_for_name)
        elif not gender or gender.strip() == '':
            # ุทูุจ ุงูุฌูุณ
            await callback.message.edit_text(
                "๐ค **ุฅููุงู ุงูุจูุงูุงุช - ุงูุฌูุณ**\n\n"
                "๐ฝ ุงุฎุชุฑ ุฌูุณู ูู ุงูุฃุฒุฑุงุฑ ุฃุฏูุงู:",
                reply_markup=create_gender_keyboard()
            )
            await state.set_state(RegistrationStates.choosing_gender)
        elif not country or str(country).strip() == '':
            # ุทูุจ ุงูุจูุฏ
            await callback.message.edit_text(
                "๐ **ุฅููุงู ุงูุจูุงูุงุช - ุงูุจูุฏ**\n\n"
                "๐ฝ ุงุฎุชุฑ ุจูุฏู ูู ุงููุงุฆูุฉ ุฃุฏูุงู:",
                reply_markup=create_country_keyboard()
            )
            await state.set_state(RegistrationStates.choosing_country)
        else:
            # ุฌููุน ุงูุจูุงูุงุช ููุฌูุฏุฉ
            await callback.message.edit_text(
                "โ **ุญุณุงุจู ููุชูู ุจุงููุนู!**\n\n"
                "ุฌููุน ุจูุงูุงุชู ููุฌูุฏุฉ ููุง ุชุญุชุงุฌ ูุฅููุงู ุฃู ุดูุก"
            )
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุจุฏุก ุฅููุงู ุงูุจูุงูุงุช: {e}")
        await callback.message.edit_text("โ ุญุฏุซ ุฎุทุฃ ูู ุจุฏุก ุฅููุงู ุงูุจูุงูุงุช")


# ุชุตุฏูุฑ ุงููุธุงุฆู ุงููููุฉ
__all__ = [
    'router',
    'is_user_registered', 
    'create_unregistered_user',
    'send_registration_required_message'
]