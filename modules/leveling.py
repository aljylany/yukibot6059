import sqlite3
import time
import json
import logging
from database.operations import execute_query
from utils.helpers import format_number
import sys
sys.path.append('.')

# ุฅุนุฏุงุฏุงุช ุงููุณุชููุงุช ุงููุญุณูุฉ - ูุธุงู XP ุชุฏุฑูุฌู ูุตู ุฅูู 10 ููููู
LEVELS = [
    {
        "name": "ุนุงูู ุงููุฌูู",
        "icon": "โญ",
        "desc": "ุงูุจุฏุงูุฉ ุงูุญููููุฉ ููุณุงุฑ ุงูููุฉ. ูุชุฏุฑุฌ ูู ูุฌู 1 ุญุชู ูุฌู 9ุ ููู ูุฌู ููุซู ุฒูุงุฏุฉ ูุจูุฑุฉ ูู ููุฉ ุงูุฌุณุฏ ูุงูุทุงูุฉ ุงููุชุงููุฉ.",
        "sub_levels": ["ูุฌู 1", "ูุฌู 2", "ูุฌู 3", "ูุฌู 4", "ูุฌู 5", "ูุฌู 6", "ูุฌู 7", "ูุฌู 8", "ูุฌู 9"],
        "xp_required": 0,
        "xp_per_action": 15,
        "abilities_unlocked": ["ูุงูุฉ ุงูุทุงูุฉ ุงูุฃุณุงุณูุฉ", "ุถุฑุจุงุช ูุญุณูุฉ", "ุชุญูู ุฃูุถู"]
    },
    {
        "name": "ุนุงูู ุงูููุฑ",
        "icon": "๐",
        "desc": "ูุชููู ูู ุซูุงุซ ูุฑุงุญู ุฑุฆูุณูุฉ: ุงูููุฑ ุงูุฌุฏูุฏุ ุงููุตู ููุฑุ ูุงูููุฑ ุงูููุชูู.",
        "stages": {
            "ุงูููุฑ ุงูุฌุฏูุฏ": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"],
            "ุงููุตู ููุฑ": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"],
            "ุงูููุฑ ุงูููุชูู": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"]
        },
        "xp_required": 5000,
        "xp_per_action": 12,
        "abilities_unlocked": ["ุชุนุฒูุฒ ุงูุณุฑุนุฉ", "ุถุฑุจุงุช ุจุทุงูุฉ ุฃุนูู", "ุชุญูู ูุถุงุนู"]
    },
    {
        "name": "ุนุงูู ุงูุดูุณ",
        "icon": "โ",
        "desc": "ุซูุงุซ ูุฑุงุญู: ุดูุณ ุงูุตุจุงุญุ ุดูุณ ุงูุตุนูุฏุ ูุดูุณ ุงูุงุญุชุฑุงู.",
        "stages": {
            "ุดูุณ ุงูุตุจุงุญ": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"],
            "ุดูุณ ุงูุตุนูุฏ": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"],
            "ุดูุณ ุงูุงุญุชุฑุงู": ["ููุฎูุถ", "ูุชูุณุท", "ุนุงูู", "ุฐุฑูุฉ"]
        },
        "xp_required": 50000,
        "xp_per_action": 10,
        "abilities_unlocked": ["ูุฌูุงุช ุจุนูุฏุฉ ุงููุฏู", "ุชุนุฒูุฒ ุนูุตุฑู", "ุฏูุงุนุงุช ูุชูุฏูุฉ"]
    },
    {
        "name": "ุนุงูู ุงูุฃุณุทูุฑุฉ",
        "icon": "๐",
        "desc": "ูุชููู ูู 9 ูุณุชููุงุช ูุชุตุงุนุฏุฉุ ููู ุงููุฑุญูุฉ ุงูุชู ุชุณุจู ุงููุตูู ุฅูู ุงูุณูุทุฑุฉ ุงููุทููุฉ ุนูู ุงูููุงููู.",
        "sub_levels": ["ุงููุณุชูู 1", "ุงููุณุชูู 2", "ุงููุณุชูู 3", "ุงููุณุชูู 4", "ุงููุณุชูู 5", "ุงููุณุชูู 6", "ุงููุณุชูู 7", "ุงููุณุชูู 8", "ุงููุณุชูู 9"],
        "xp_required": 200000,
        "xp_per_action": 8,
        "abilities_unlocked": ["ุงูุชุญูู ุจูุฌุงู ุงููุนุฑูุฉ", "ุชุนุทูู ุฎุตูู ูุชุนุฏุฏูู", "ุชุฌุฏูุฏ ุทุงูุฉ ุณุฑูุน"]
    },
    {
        "name": "ุงูุนุงูู ุงูุณูุงุฏู",
        "icon": "๐",
        "desc": "ูุฑุญูุฉ ุงูุณูุทุฑุฉ ุดุจู ุงููุทููุฉ ุนูู ุงูุทุงูุฉ ูุงูููุงููู.",
        "xp_required": 1000000,
        "xp_per_action": 6,
        "abilities_unlocked": ["ุงูุณูุทุฑุฉ ุนูู ุงูููุงููู", "ุฅููุงู ุงูุฒูู ูุซูุงูู", "ุชุนุฒูุฒ ุงูุญููุงุก"]
    },
    {
        "name": "ุงูุนุงูู ุงูููุงุฆู",
        "icon": "โจ",
        "desc": "ุงูููุฉ ุงููุทููุฉ ููุทุงูุฉ. ุงูููุงุชู ููุง ูุงุฏุฑ ุนูู ุฅุนุงุฏุฉ ุชุดููู ุงููุงูุน ููุณู.",
        "xp_required": 10000000,
        "xp_per_action": 5,
        "abilities_unlocked": ["ุฅุนุงุฏุฉ ุชุดููู ุงููุงูุน", "ุชุญูู ูุงูู ุจุงูููุงููู", "ูุฏุฑุงุช ูุงูุญุฏูุฏุฉ"]
    }
]

logging.info(f"โ ุชู ุชุญููู ุฅุนุฏุงุฏุงุช ุงููุณุชููุงุช: {len(LEVELS)} ุนูุงูู")

class LevelingSystem:
    def __init__(self):
        self.levels = LEVELS
        logging.info(f"๐ฎ ุชู ุชููุฆุฉ ูุธุงู ุงููุณุชููุงุช ูุน {len(self.levels)} ุนูุงูู")

    def get_world(self, world_name):
        # ุฅุถุงูุฉ logging ููุชุดุฎูุต
        logging.info(f"ุงูุจุญุซ ุนู ุงูุนุงูู: '{world_name}'")
        logging.info(f"ุงูุนูุงูู ุงููุชุงุญุฉ: {[w['name'] for w in self.levels]}")
        
        for world in self.levels:
            if world["name"] == world_name:
                logging.info(f"ุชู ุงูุนุซูุฑ ุนูู ุงูุนุงูู: {world['name']}")
                return world
        
        logging.warning(f"ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุนุงูู: '{world_name}'")
        # ุฅุฑุฌุงุน ุงูุนุงูู ุงูุฃูู ูุญู ุงุญุชูุงุทู
        if self.levels:
            logging.info(f"ุงุณุชุฎุฏุงู ุงูุนุงูู ุงูุงุญุชูุงุทู: {self.levels[0]['name']}")
            return self.levels[0]
        return None

    async def add_xp(self, user_id, action_type="message"):
        try:
            # ุฌูุจ ุจูุงูุงุช ุงููุณุชูู ุงูุญุงูู
            level_data = await execute_query(
                "SELECT * FROM levels WHERE user_id = ?",
                (user_id,),
                fetch_one=True
            )
            
            if not level_data:
                # ุฅูุดุงุก ุณุฌู ุฌุฏูุฏ
                await execute_query(
                    "INSERT INTO levels (user_id, xp, level_name, world_name, last_xp_gain) VALUES (?, 0, 'ูุฌู 1', 'ุนุงูู ุงููุฌูู', ?)",
                    (user_id, time.time())
                )
                current_xp = 0
                current_world = "ุนุงูู ุงููุฌูู"
                current_level = "ูุฌู 1"
            else:
                # ูุนุงูุฌุฉ ุจุณูุทุฉ ูุขููุฉ ููุจูุงูุงุช - execute_query ุชุฑุฌุน dict ุฃู None ููุท
                try:
                    # ุงูุชุฃูุฏ ูู ุฃู level_data ูู dict
                    if isinstance(level_data, dict):
                        current_xp = max(0, level_data.get('xp', 0) or 0)
                        current_world = level_data.get('world_name', "ุนุงูู ุงููุฌูู") or "ุนุงูู ุงููุฌูู"
                        current_level = level_data.get('level_name', "ูุฌู 1") or "ูุฌู 1"
                    else:
                        current_xp = 0
                        current_world = "ุนุงูู ุงููุฌูู"
                        current_level = "ูุฌู 1"
                except Exception as data_error:
                    logging.error(f"ุฎุทุฃ ูู ูุฑุงุกุฉ ุจูุงูุงุช ุงููุณุชูู: {data_error}")
                    current_xp = 0
                    current_world = "ุนุงูู ุงููุฌูู"
                    current_level = "ูุฌู 1"
            
            # ุงูุญุตูู ุนูู ุงูุนุงูู ุงูุญุงูู
            world = self.get_world(current_world)
            if not world:
                return False, "ุงูุนุงูู ุบูุฑ ููุฌูุฏ"
            
            # ุญุณุงุจ XP ุงูููููุญุฉ
            xp_gain = world["xp_per_action"]
            
            # ุชุญุฏูุซ ุงูู XP ูุน ุถูุงู ุนุฏู ุงูุณุงูุจ
            new_xp = max(0, current_xp + xp_gain)
            await execute_query(
                "UPDATE levels SET xp = ?, last_xp_gain = ? WHERE user_id = ?",
                (new_xp, time.time(), user_id)
            )
            
            # ุงูุชุญูู ูู ุชุฑููุฉ ุงููุณุชูู
            upgrade_result = await self.check_level_up(user_id, new_xp, current_world, current_level)
            
            return True, f"โจ +{xp_gain} XP"
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ XP: {e}")
            return False, f"ุญุฏุซ ุฎุทุฃ: {str(e)}"

    async def check_level_up(self, user_id, current_xp, current_world, current_level):
        try:
            world = self.get_world(current_world)
            if not world:
                return False, "ุงูุนุงูู ุบูุฑ ููุฌูุฏ"
            
            # ุงูุญุตูู ุนูู ุงูุนุงูู ุงูุชุงูู
            next_world_index = next((i for i, w in enumerate(self.levels) if w["name"] == current_world), -1) + 1
            next_world = self.levels[next_world_index] if next_world_index < len(self.levels) else None
            
            # ุงูุชุญูู ุฅุฐุง ูุงู ูููู ุงูุชุฑููุฉ ูุนุงูู ุฌุฏูุฏ
            if next_world and current_xp >= next_world["xp_required"]:
                # ุชุฑููุฉ ูุนุงูู ุฌุฏูุฏ
                new_world_name = next_world["name"]
                # ุงุณุชุฎุฏุงู ุงูููุชุงุญ ุงูุตุญูุญ ูููุณุชููุงุช
                if "sub_levels" in next_world:
                    new_level_name = next_world["sub_levels"][0]
                elif "stages" in next_world:
                    first_stage_name = list(next_world["stages"].keys())[0]
                    new_level_name = f"{first_stage_name} - {next_world['stages'][first_stage_name][0]}"
                else:
                    new_level_name = "ูุณุชูู 1"
                
                await execute_query(
                    "UPDATE levels SET world_name = ?, level_name = ? WHERE user_id = ?",
                    (new_world_name, new_level_name, user_id)
                )
                
                return True, f"๐ ุชุฑููุฉ ููุนุงูู ุงูุฌุฏูุฏ: {new_world_name}!"
            
            # ุงูุชุญูู ูู ุชุฑููุฉ ุฏุงุฎู ููุณ ุงูุนุงูู
            # ูุนุงูุฌุฉ ุงููุณุชููุงุช ุงููุฑุนูุฉ
            if "sub_levels" in world:
                try:
                    current_level_index = world["sub_levels"].index(current_level)
                    if current_level_index < len(world["sub_levels"]) - 1:
                        next_level_name = world["sub_levels"][current_level_index + 1]
                        # ุญุณุงุจ XP ุงููุทููุจ ูููุณุชูู ุงูุชุงูู (ูุจุณุท)
                        required_xp = (current_level_index + 2) * 200
                        
                        if current_xp >= required_xp:
                            await execute_query(
                                "UPDATE levels SET level_name = ? WHERE user_id = ?",
                                (next_level_name, user_id)
                            )
                            return True, f"๐ ุชุฑููุฉ ููุณุชูู ุฌุฏูุฏ: {next_level_name}!"
                except ValueError:
                    pass
            
            # ูุนุงูุฌุฉ ุงูุนูุงูู ุฐุงุช ุงููุฑุงุญู
            elif "stages" in world:
                # ุชูููุฐ ููุทู ุงููุฑุงุญู ูุงุญูุงู
                pass
            
            return False, "ูุง ุชูุฌุฏ ุชุฑููุฉ"
            
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ูุญุต ุชุฑููุฉ ุงููุณุชูู: {e}")
            logging.error(f"ุชูุงุตูู ุงูุฎุทุฃ - current_world: {current_world}, current_level: {current_level}, current_xp: {current_xp}")
            return False, f"ุญุฏุซ ุฎุทุฃ: {str(e)}"
    
    async def get_user_level_info(self, user_id):
        """ุงูุญุตูู ุนูู ูุนูููุงุช ูุณุชูู ุงููุณุชุฎุฏู"""
        try:
            level_data = await execute_query(
                "SELECT * FROM levels WHERE user_id = ?",
                (user_id,),
                fetch_one=True
            )
            
            if not level_data:
                return {
                    'xp': 0,
                    'level_name': 'ูุฌู 1',
                    'world_name': 'ุนุงูู ุงููุฌูู',
                    'progress': 0
                }
            
            if isinstance(level_data, dict):
                return {
                    'xp': level_data.get('xp', 0),
                    'level_name': level_data.get('level_name', 'ูุฌู 1'),
                    'world_name': level_data.get('world_name', 'ุนุงูู ุงููุฌูู'),
                    'progress': 0  # ูููู ุญุณุงุจ ุงูุชูุฏู ูุงุญูุงู
                }
            else:
                return {
                    'xp': 0,
                    'level_name': 'ูุฌู 1',
                    'world_name': 'ุนุงูู ุงููุฌูู',
                    'progress': 0
                }
            
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุณุชูู: {e}")
            return None


# ุฅูุดุงุก ูุณุฎุฉ ุนุงูุฉ ูู ูุธุงู ุงูุชุทููุฑ
leveling_system = LevelingSystem()


async def get_user_level_info(user_id: int):
    """ุงูุญุตูู ุนูู ูุนูููุงุช ูุณุชูู ุงููุณุชุฎุฏู ููุต ููุณู"""
    try:
        user_level = await leveling_system.get_user_level_info(user_id)
        
        if not user_level:
            return None
        
        current_xp = user_level.get('xp', 0)
        level_name = user_level.get('level_name', 'ูุฌู 1')
        world_name = user_level.get('world_name', 'ุนุงูู ุงููุฌูู')
        
        # ุญุณุงุจ XP ุงููุทููุจ ูููุณุชูู ุงูุชุงูู (ูุจุณุท)
        if "ูุฌู" in level_name:
            try:
                star_num = int(level_name.split()[-1])
                next_level_xp = 1000 * star_num  # ุญุณุงุจ ุจุณูุท
            except:
                next_level_xp = 1000
        else:
            next_level_xp = 2000
            
        remaining_xp = max(0, next_level_xp - current_xp)
        
        level_display = f"""โญ **ูุณุชูุงู:**

๐ฏ ุงููุณุชูู: {level_name}
โจ ุงูููุงุท: {current_xp:,} XP
๐ช ูููุณุชูู ุงูุชุงูู: {remaining_xp:,} XP
๐ ุงูุชูุฏู: {current_xp:,} XP"""
        
        return level_display.strip()
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฌูุจ ูุนูููุงุช ุงููุณุชูู: {e}")
        return None


async def add_xp(user_id: int, amount: int):
    """ุฅุถุงูุฉ XP ูุจุณุทุฉ ูููุณุชุฎุฏู"""
    try:
        success, message = await leveling_system.add_xp(user_id, "generic")
        return success
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ XP: {e}")
        return False