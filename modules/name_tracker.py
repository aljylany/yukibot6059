"""
ูุธุงู ุชุชุจุน ุงูุฃุณูุงุก ุงููุชุบูุฑุฉ ููููู
Name Tracking System for Yuki Bot
"""

import logging
import random
from typing import Optional, Dict, Any
from database.operations import execute_query

class NameTracker:
    """ูุธุงู ุชุชุจุน ุงูุฃุณูุงุก ุงููุชุบูุฑุฉ ูููุณุชุฎุฏููู"""
    
    def __init__(self):
        self.detection_enabled = True
        
    async def track_user_name(self, user_id: int, chat_id: int, first_name: str = None, 
                             username: str = None, last_name: str = None) -> Optional[Dict[str, Any]]:
        """ุชุชุจุน ูุชุณุฌูู ุฃุณูุงุก ุงููุณุชุฎุฏู ูุงููุดู ุนู ุงูุชุบููุฑุงุช"""
        try:
            # ูุญุต ุงูุงุณู ุงูุญุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            last_record_query = """
                SELECT first_name, username, last_name, detected_at 
                FROM user_name_history 
                WHERE user_id = ? AND chat_id = ? 
                ORDER BY detected_at DESC 
                LIMIT 1
            """
            last_record = await execute_query(last_record_query, (user_id, chat_id), fetch_one=True)
            
            # ุงูุชุญูู ูู ูุฌูุฏ ุชุบููุฑ ูู ุงูุงุณู
            name_changed = False
            change_details = {}
            
            if last_record:
                old_first_name = last_record.get('first_name', '')
                old_username = last_record.get('username', '')
                old_last_name = last_record.get('last_name', '')
                
                # ูุญุต ุชุบููุฑ ุงูุงุณู ุงูุฃูู
                if first_name and first_name != old_first_name:
                    name_changed = True
                    change_details['first_name'] = {
                        'old': old_first_name,
                        'new': first_name
                    }
                
                # ูุญุต ุชุบููุฑ ุงุณู ุงููุณุชุฎุฏู
                if username and username != old_username:
                    name_changed = True
                    change_details['username'] = {
                        'old': old_username,
                        'new': username
                    }
                
                # ูุญุต ุชุบููุฑ ุงูุงุณู ุงูุฃุฎูุฑ
                if last_name and last_name != old_last_name:
                    name_changed = True
                    change_details['last_name'] = {
                        'old': old_last_name,
                        'new': last_name
                    }
            else:
                # ุฅุฐุง ูู ููู ููุงู ุณุฌู ุณุงุจูุ ููุฐุง ูุณุชุฎุฏู ุฌุฏูุฏ
                name_changed = False
            
            # ุญูุธ ุงูุงุณู ุงูุฌุฏูุฏ ูู ุงูุณุฌู (ุฅุฐุง ูุงู ููุงู ุชุบููุฑ ุฃู ูุณุชุฎุฏู ุฌุฏูุฏ)
            if name_changed or not last_record:
                save_query = """
                    INSERT INTO user_name_history (user_id, chat_id, first_name, username, last_name)
                    VALUES (?, ?, ?, ?, ?)
                """
                await execute_query(save_query, (user_id, chat_id, first_name, username, last_name))
                logging.info(f"โ ุชู ุญูุธ ุงุณู ุงููุณุชุฎุฏู {user_id} ูู ุงูุณุฌู")
            
            # ุฅุฑุฌุงุน ุงููุชูุฌุฉ ุฅุฐุง ูุงู ููุงู ุชุบููุฑ
            if name_changed:
                return {
                    'changed': True,
                    'changes': change_details,
                    'old_record': last_record
                }
            
            return None
            
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุชุชุจุน ุงุณู ุงููุณุชุฎุฏู {user_id}: {e}")
            return None
    
    def generate_name_change_comment(self, user_id: int, user_name: str, change_details: Dict) -> str:
        """ุชูููุฏ ุชุนููู ูุฑุญ ุนูุฏ ุงูุชุดุงู ุชุบููุฑ ุงูุงุณู"""
        
        # ุชุนูููุงุช ูุฑุญุฉ ูููุดู ุนู ุชุบููุฑ ุงูุฃุณูุงุก
        detection_phrases = [
            f"๐ ูููู {user_name}! ุชุนุชูุฏ ุฅูู ูุง ุจุนุฑูู ุจุณ ุบูุฑุช ุงุณููุ",
            f"๐ค {user_name}ุ ูููุฉ ุฌุฏูุฏุฉ ููุง ุฅูุดุ ุฃูุง ูุชุฐูุฑู ูููุณ!",
            f"๐ ูุงุงููู! {user_name} ุฌุงู ูุฎุฏุนูู ุจุงูุงุณู ุงูุฌุฏูุฏุ ุจุณ ุฃูุง ุฐุงูุฑุชู ูููุฉ!",
            f"๐ต๏ธ {user_name} ููุฑ ุฅูู ุฑุงุญ ูุถุญู ุนููู ุจุชุบููุฑ ุงูุงุณูุ ุจุณ ูููู ูุง ููุฎุฏุน!",
            f"๐ ุดูุชู ุบูุฑุช ุงุณูู ูุง {user_name}! ุจุณ ุฃูุง ุนุงุฑูู ูู ุฃูู ููู!",
            f"๐ญ {user_name}ุ ุดู ูุงููููุฉ ุงูุฌุฏูุฏุฉุ ุฃูุง ุดุงููู ูู ุฒูุงู ููุง!",
            f"๐ {user_name} ุฌุฑุจ ูุบูุฑ ุงุณูู ุนุดุงู ูุง ุฃุนุฑููุ ุจุณ ูููู ุฐูู ุฃูุซุฑ ูู ูุฐุง!",
            f"๐ ูุง! ูุดูุชู ูุง {user_name}! ูุง ุชูุฏุฑ ุชุฎูู ุนู ูููู ูููุชู!",
            f"๐ {user_name}ุ ุงุณู ุฌุฏูุฏ ุจุณ ููุณ ุงูุดุฎุต! ุฃูุง ูุงูุฑู ูููุณ!",
            f"๐ช {user_name} ุนุงูู ูุณุฑุญูุฉ ุชุบููุฑ ุงุณูุ ุจุณ ูููู ูุง ุจููุฎุฏุน!"
        ]
        
        # ุฅุถุงูุฉ ุชูุงุตูู ุงูุชุบููุฑ
        change_info = ""
        if 'first_name' in change_details:
            old_name = change_details['first_name']['old']
            new_name = change_details['first_name']['new']
            change_info += f"\nููุช ุงุณูู '{old_name}' ูุตุงุฑ '{new_name}'"
        
        if 'username' in change_details:
            old_username = change_details['username']['old']
            new_username = change_details['username']['new']
            if old_username:
                change_info += f"\nููุงู ูุนุฑูู @{old_username}"
            if new_username:
                change_info += f" ูุตุงุฑ @{new_username}"
        
        base_comment = random.choice(detection_phrases)
        
        if change_info:
            return f"{base_comment}{change_info}"
        else:
            return base_comment
    
    async def get_user_name_history(self, user_id: int, chat_id: int, limit: int = 5) -> list:
        """ุฌูุจ ุณุฌู ุฃุณูุงุก ุงููุณุชุฎุฏู"""
        try:
            query = """
                SELECT first_name, username, last_name, detected_at 
                FROM user_name_history 
                WHERE user_id = ? AND chat_id = ? 
                ORDER BY detected_at DESC 
                LIMIT ?
            """
            history = await execute_query(query, (user_id, chat_id, limit), fetch_all=True)
            return history or []
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุฌูุจ ุณุฌู ุฃุณูุงุก ุงููุณุชุฎุฏู {user_id}: {e}")
            return []
    
    async def get_all_names_for_user(self, user_id: int, chat_id: int) -> list:
        """ุฌูุจ ุฌููุน ุงูุฃุณูุงุก ุงูุชู ุงุณุชุฎุฏููุง ุงููุณุชุฎุฏู"""
        try:
            query = """
                SELECT DISTINCT first_name, username, last_name 
                FROM user_name_history 
                WHERE user_id = ? AND chat_id = ? 
                ORDER BY detected_at DESC
            """
            names = await execute_query(query, (user_id, chat_id), fetch_all=True)
            return names or []
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุฌูุจ ุฌููุน ุฃุณูุงุก ุงููุณุชุฎุฏู {user_id}: {e}")
            return []
    
    def should_detect_change(self, user_id: int) -> bool:
        """ุชุญุฏูุฏ ุฅุฐุง ูุงู ูุฌุจ ูุดู ุชุบููุฑ ุงูุงุณู ูููุณุชุฎุฏู"""
        # ูููู ุฅุถุงูุฉ ููุทู ููุง ูุงุณุชุซูุงุก ูุณุชุฎุฏููู ูุนูููู
        # ุฃู ุชูููู ุชูุฑุงุฑ ุงููุดู
        return self.detection_enabled
    
    async def cleanup_old_name_records(self, days_old: int = 90):
        """ุชูุธูู ุณุฌูุงุช ุงูุฃุณูุงุก ุงููุฏููุฉ"""
        try:
            query = """
                DELETE FROM user_name_history 
                WHERE detected_at < datetime('now', '-{} days')
            """.format(days_old)
            
            rows_deleted = await execute_query(query)
            logging.info(f"โ ุชู ุญุฐู {rows_deleted} ุณุฌู ุงุณู ูุฏูู")
            return rows_deleted
            
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุชูุธูู ุณุฌูุงุช ุงูุฃุณูุงุก ุงููุฏููุฉ: {e}")
            return 0

# ุฅูุดุงุก ูุซูู ูู ูุธุงู ุชุชุจุน ุงูุฃุณูุงุก
name_tracker = NameTracker()