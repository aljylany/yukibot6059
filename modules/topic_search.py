"""
ูุธุงู ุงูุจุญุซ ูู ุงูููุงุถูุน ูุงูุฐุงูุฑุฉ ุงููุดุชุฑูุฉ
Topic Search and Shared Memory Query System
"""

import logging
from typing import List, Dict, Optional
from modules.shared_memory_pg import shared_group_memory_pg

class TopicSearchEngine:
    """ูุญุฑู ุงูุจุญุซ ูู ุงูููุงุถูุน ูุงูุฐุงูุฑุฉ ุงููุดุชุฑูุฉ"""
    
    def __init__(self):
        self.search_phrases = {
            'user_info': ['ูุงุฐุง ุชุนุฑู ุนู', 'ูุนูููุงุช ุนู', 'ูู ูู ุนู'],
            'conversation_history': ['ูุงุฐุง ููุชู ุชุชุญุฏุซูู', 'ูุงุฐุง ูุงู', 'ุชุญุฏุซุชู ุนูู', 'ูุงู ุนูู'],
            'topic_search': ['ูู ุชุญุฏุซ ุนู', 'ูู ุฐูุฑ', 'ูุญุงุฏุซุงุช ุญูู'],
            'user_connections': ['ุงูุนูุงูุฉ ุจูู', 'ูุงุฐุง ูุนุฑู', 'ุชุญุฏุซูุง ูุน ุจุนุถ']
        }
    
    async def process_query(self, query: str, user_id: int, chat_id: int) -> Optional[str]:
        """ูุนุงูุฌุฉ ุงุณุชุนูุงู ุงูุจุญุซ ูุฅุฑุฌุงุน ุงููุชุงุฆุฌ"""
        query_lower = query.lower().strip()
        
        try:
            # ุงูุจุญุซ ุนู ูุนูููุงุช ูุณุชุฎุฏู ูุนูู
            if any(phrase in query_lower for phrase in self.search_phrases['user_info']):
                return await self._search_user_info(query, user_id, chat_id)
            
            # ุงูุจุญุซ ูู ุชุงุฑูุฎ ุงููุญุงุฏุซุงุช
            elif any(phrase in query_lower for phrase in self.search_phrases['conversation_history']):
                return await self._search_conversation_history(query, user_id, chat_id)
            
            # ุงูุจุญุซ ุนู ููุถูุน ูุนูู
            elif any(phrase in query_lower for phrase in self.search_phrases['topic_search']):
                return await self._search_topic(query, user_id, chat_id)
            
            # ุงูุจุญุซ ุนู ุงูุฑูุงุจุท ุจูู ุงููุณุชุฎุฏููู
            elif any(phrase in query_lower for phrase in self.search_phrases['user_connections']):
                return await self._search_user_connections(query, user_id, chat_id)
            
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุงุณุชุนูุงู: {e}")
        
        return None
    
    async def _search_user_info(self, query: str, user_id: int, chat_id: int) -> str:
        """ุงูุจุญุซ ุนู ูุนูููุงุช ูุณุชุฎุฏู ูุนูู"""
        # ุงุณุชุฎุฑุงุฌ ุงุณู ุงููุณุชุฎุฏู ูู ุงูุงุณุชุนูุงู
        words = query.split()
        target_username = None
        
        for word in words:
            if word.startswith('@'):
                target_username = word[1:]
                break
            elif len(word) > 2 and word not in ['ูุงุฐุง', 'ุชุนุฑู', 'ุนู', 'ูุนูููุงุช']:
                target_username = word
                break
        
        if not target_username:
            return "ูู ุฃุชููู ูู ุชุญุฏูุฏ ุงููุณุชุฎุฏู ุงููุทููุจ ุงูุจุญุซ ุนูู."
        
        # ุงูุจุญุซ ูู ุงูุฐุงูุฑุฉ ุงููุดุชุฑูุฉ
        # ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู ุจุงูุงุณู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        try:
            conn = await shared_group_memory_pg.get_db_connection()
            if not conn:
                return f"ูู ุฃุชููู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ููุจุญุซ ุนู {target_username}."
            
            try:
                # ุงูุจุญุซ ุนู ุงููุญุงุฏุซุงุช ุงูุชู ุชุญุชูู ุนูู ุงูุงุณู ุงููุทููุจ
                rows = await conn.fetch('''
                    SELECT user_id, username, message_text, ai_response, topics, timestamp
                    FROM shared_conversations
                    WHERE chat_id = $1 
                    AND (message_text ILIKE $2 OR username ILIKE $3 OR topics ILIKE $4)
                    ORDER BY timestamp DESC
                    LIMIT 10
                ''', chat_id, f'%{target_username}%', f'%{target_username}%', f'%{target_username}%')
                
                if rows:
                    context = f"ูุนูููุงุช ุนู {target_username}:\n"
                    for row in rows:
                        user_id_found, username, message, ai_response, topics, timestamp = row
                        # ุงุณุชุฎุฑุงุฌ ุงููุนูููุงุช ุงููููุฉ ูู ุงูุฑุณุงูุฉ
                        if 'ุนูุฑู' in message or 'ุนูุฑ' in message:
                            context += f"โข ุงูุนูุฑ: {message}\n"
                        if 'ุงุณูู' in message:
                            context += f"โข ุงูุงุณู: {message}\n"
                        if 'ุงุญุจ' in message or 'ุฃุญุจ' in message:
                            context += f"โข ุงูุงูุชูุงูุงุช: {message}\n"
                        
                        # ุฅุถุงูุฉ ุฌุฒุก ูู ุงูุฑุณุงูุฉ
                        context += f"โข ูุงู: {message[:100]}{'...' if len(message) > 100 else ''}\n"
                        if ai_response:
                            context += f"  โ ูุฑุฏ ูููู: {ai_response[:80]}{'...' if len(ai_response) > 80 else ''}\n"
                        context += "\n"
                    
                    return context
                else:
                    return f"ูู ุฃุฌุฏ ูุนูููุงุช ูุณุฌูุฉ ุนู {target_username} ูู ุฐุงูุฑุชู ุงููุดุชุฑูุฉ."
                    
            finally:
                await conn.close()
                
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู: {e}")
            return f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ ุนู {target_username}."
        
    
    async def _search_conversation_history(self, query: str, user_id: int, chat_id: int) -> str:
        """ุงูุจุญุซ ูู ุชุงุฑูุฎ ุงููุญุงุฏุซุงุช"""
        context = await shared_group_memory_pg.get_shared_context_about_user(chat_id, user_id, user_id, limit=8)
        
        if context:
            return f"๐ฃ๏ธ **ุงููุญุงุฏุซุงุช ุงูุชู ุชุฎุตู:**\n\n{context}"
        else:
            return "ูู ุฃุฌุฏ ูุญุงุฏุซุงุช ูุณุฌูุฉ ุนูู ูู ุงูุฐุงูุฑุฉ ุงููุดุชุฑูุฉ."
    
    async def _search_topic(self, query: str, user_id: int, chat_id: int) -> str:
        """ุงูุจุญุซ ุนู ููุถูุน ูุนูู"""
        # ุงุณุชุฎุฑุงุฌ ุงูููุถูุน ูู ุงูุงุณุชุนูุงู
        words = query.split()
        topic = None
        
        for i, word in enumerate(words):
            if word in ['ุนู', 'ุญูู']:
                if i + 1 < len(words):
                    topic = words[i + 1]
                    break
        
        if not topic:
            return "ูู ุฃุชููู ูู ุชุญุฏูุฏ ุงูููุถูุน ุงููุทููุจ ุงูุจุญุซ ุนูู."
        
        # ุงูุจุญุซ ุนู ุงููุญุงุฏุซุงุช ุงููุชุนููุฉ ุจุงูููุถูุน
        try:
            conn = await shared_group_memory_pg.get_db_connection()
            if not conn:
                return f"ูู ุฃุชููู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ููุจุญุซ ุนู ุงูููุถูุน {topic}."
            
            try:
                rows = await conn.fetch('''
                    SELECT user_id, username, message_text, ai_response, timestamp
                    FROM shared_conversations
                    WHERE chat_id = $1 AND (message_text ILIKE $2 OR topics ILIKE $3)
                    ORDER BY timestamp DESC
                    LIMIT 5
                ''', chat_id, f'%{topic}%', f'%{topic}%')
                
                if rows:
                    context = f"ุงููุญุงุฏุซุงุช ุญูู ููุถูุน '{topic}':\n"
                    for row in rows:
                        user_id_found, username, message, ai_response, timestamp = row
                        context += f"โข {username}: {message[:100]}{'...' if len(message) > 100 else ''}\n"
                        if ai_response:
                            context += f"  โ ูููู ุฑุฏ: {ai_response[:80]}{'...' if len(ai_response) > 80 else ''}\n"
                        context += "\n"
                    return context
                else:
                    return f"ูู ุฃุฌุฏ ูุญุงุฏุซุงุช ูุณุฌูุฉ ุญูู ููุถูุน '{topic}'."
                    
            finally:
                await conn.close()
                
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูููุถูุน: {e}")
            return f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ ุนู ุงูููุถูุน {topic}."
        
    
    async def _search_user_connections(self, query: str, user_id: int, chat_id: int) -> str:
        """ุงูุจุญุซ ุนู ุงูุฑูุงุจุท ุจูู ุงููุณุชุฎุฏููู"""
        try:
            conn = await shared_group_memory_pg.get_db_connection()
            if not conn:
                return "ูู ุฃุชููู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช."
            
            try:
                rows = await conn.fetch('''
                    SELECT user_id, username, message_text, mentioned_users, timestamp
                    FROM shared_conversations
                    WHERE chat_id = $1 AND (user_id = $2 OR mentioned_users LIKE $3)
                    ORDER BY timestamp DESC
                    LIMIT 5
                ''', chat_id, user_id, f'%{user_id}%')
                
                if rows:
                    context = "ุงูุฑูุงุจุท ูุงููุญุงุฏุซุงุช:\n"
                    for row in rows:
                        user_id_found, username, message, mentioned_users, timestamp = row
                        context += f"โข {username}: {message[:100]}{'...' if len(message) > 100 else ''}\n"
                    return context
                else:
                    return "ูู ุฃุฌุฏ ุฑูุงุจุท ูุญุงุฏุซุงุช ูุณุฌูุฉ."
                    
            finally:
                await conn.close()
                
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงูุฑูุงุจุท: {e}")
            return "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุจุญุซ ุนู ุงูุฑูุงุจุท."

# ุฅูุดุงุก ูุณุฎุฉ ูุงุญุฏุฉ ูู ูุญุฑู ุงูุจุญุซ
topic_search_engine = TopicSearchEngine()