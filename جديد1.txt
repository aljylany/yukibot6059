import logging
import re
from telegram import Update, ChatPermissions
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from datetime import datetime, timedelta

# إعدادات التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# قواعد البيانات (في الإنتاج استخدم قاعدة بيانات حقيقية)
user_warnings = {}
bad_words_db = set()
admin_commands = {}

# صلاحيات المستخدم المقيد
RESTRICTED_PERMISSIONS = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False
)

# تعابير منتظمة لاكتشاف الاختلافات في الكتابة
BAD_PATTERNS = [
    # كلمات عامة
    r'(?i)\b(س[ب٨])\b', r'(?i)\b(ش[ت٥]م)\b', r'(?i)\b(ق[ذ٨]ف)\b', 
    r'(?i)\b(ط[ع٥]ن)\b', r'(?i)\b(ك[ل٤]ب)\b',
    
    # كلمات مسيئة مع تهجئات مختلفة
    r'(?i)\b(ع[اٲ]ه[ر٤])\b', r'(?i)\b(ز[اٲ]ن[ي٨])\b',
    r'(?i)\b(ف[ح٨]ل)\b', r'(?i)\b(ش[ر٤]م[و٦]ط)\b',
    r'(?i)\b(ق[ح٨]ب[هة])\b', r'(?i)\b(م[ن٥][ي٨][و٦]ك)\b',
    
    # كلمات أخرى
    r'(?i)\b(خ[و٦]ل)\b', r'(?i)\b(خ[ن٥]ي[ث٨])\b',
    r'(?i)\b(ن[ذ٨]ل)\b', r'(?i)\b(ل[ع٥]ي[ن٥])\b',
    r'(?i)\b(ح[ق٥]ي[ر٤])\b', r'(?i)\b(و[س٥]خ)\b',
    r'(?i)\b(ح[ث٨]ال[هة])\b', r'(?i)\b(ب[و٦]ي)\b',
    r'(?i)\b(م[اٲ]د[ر٤])\b',
    
    # اختصارات وكتابات بديلة
    r'(?i)\b(كسم)\b', r'(?i)\b(كسختك)\b', r'(?i)\b(عير)\b',
    r'(?i)\b(ابن?\s*ال?\w{2,4})\b',  # لاكتشاف "ابن..." مع اختلافات
]

def load_bad_words():
    """تحميل الكلمات المسيئة من قاعدة البيانات"""
    # هنا يمكنك جلب الكلمات من قاعدة بيانات خارجية
    # لأغراض العرض، نستخدم مجموعة ثابتة
    base_words = {
        'سب', 'شتم', 'قذف', 'طعن', 'كلب', 'عاهر', 'زاني', 'فحل', 'شرموط',
        'قحبه', 'منيوك', 'منيوكه', 'زباله', 'خول', 'خنيث', 'داعر', 'داعره',
        'سافل', 'سافله', 'وسخ', 'قذر', 'حقير', 'حثاله', 'نذل', 'لعين'
    }
    bad_words_db.update(base_words)

def add_bad_word(update: Update, context: CallbackContext):
    """إضافة كلمة مسيئة جديدة إلى القائمة (للمشرفين فقط)"""
    user_status = update.effective_chat.get_member(update.effective_user.id).status
    if user_status not in ['administrator', 'creator']:
        update.message.reply_text("⚠️ هذا الأمر متاح فقط للمشرفين!")
        return
    
    if not context.args:
        update.message.reply_text("⚠️ يرجى إدخال الكلمة المراد إضافتها.\nمثال: /addword كلمة")
        return
    
    new_word = ' '.join(context.args).lower()
    
    # إضافة الكلمة إلى قاعدة البيانات
    bad_words_db.add(new_word)
    
    # إنشاء نمط جديد للكلمة مع اختلافات الكتابة
    pattern = create_pattern(new_word)
    if pattern not in BAD_PATTERNS:
        BAD_PATTERNS.append(pattern)
    
    update.message.reply_text(f"✅ تمت إضافة الكلمة المسيئة: {new_word}")

def create_pattern(word: str) -> str:
    """إنشاء نمط تعبير منتظم للكلمة مع اختلافات الكتابة"""
    replacements = {
        'ا': '[اٲإأٱآ]',
        'ب': '[ب٨]',
        'ت': '[ت٥]',
        'ث': '[ث٨]',
        'ج': '[جچ]',
        'ح': '[ح٨]',
        'خ': '[خ٨]',
        'د': '[د]',
        'ذ': '[ذ٨]',
        'ر': '[ر٤]',
        'ز': '[ز]',
        'س': '[س٥]',
        'ش': '[ش]',
        'ص': '[ص]',
        'ض': '[ض]',
        'ط': '[ط٥]',
        'ظ': '[ظ]',
        'ع': '[ع٥]',
        'غ': '[غ]',
        'ف': '[ف]',
        'ق': '[ق٥]',
        'ك': '[كک]',
        'ل': '[ل]',
        'م': '[م]',
        'ن': '[ن٥]',
        'ه': '[هة]',
        'و': '[و٦]',
        'ي': '[ي٨ئى]'
    }
    
    pattern = r'(?i)\b('
    for char in word:
        if char in replacements:
            pattern += replacements[char]
        else:
            pattern += char
    pattern += r')\b'
    
    return pattern

def contains_bad_words(text: str) -> bool:
    """فحص النص لوجود ألفاظ مسيئة"""
    text = text.lower()
    
    # الفحص ضد الكلمات المسيئة مباشرة
    for word in bad_words_db:
        if word in text:
            return True
    
    # الفحص باستخدام التعابير المنتظمة للاختلافات
    for pattern in BAD_PATTERNS:
        if re.search(pattern, text):
            return True
    
    return False

def delete_offensive_message(update: Update, context: CallbackContext):
    """حذف الرسائل المسيئة وتطبيق العقوبات"""
    # تجاهل رسائل المسؤولين
    if update.effective_chat.get_member(update.effective_user.id).status in ['administrator', 'creator']:
        return
    
    message = update.message
    message_text = message.text or message.caption or ""
    
    if contains_bad_words(message_text):
        try:
            # حذف الرسالة
            message.delete()
            
            # تسجيل التحذير
            user_id = message.from_user.id
            user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
            warns = user_warnings[user_id]
            
            # إرسال تحذير للمستخدم
            context.bot.send_message(
                chat_id=user_id,
                text=f"⚠️ تم حذف رسالتك لاحتوائها على ألفاظ غير لائقة!\nعدد تحذيراتك: {warns}/3"
            )
            
            # إرسال إشعار للمجموعة
            update.effective_chat.send_message(
                text=f"@{message.from_user.username} يُمنع استخدام الألفاظ النابية في هذه المجموعة!"
            )
            
            # تطبيق العقوبات حسب عدد التحذيرات
            if warns >= 3:
                update.effective_chat.ban_member(
                    user_id,
                    until_date=datetime.now() + timedelta(days=1)
                )
                update.effective_chat.send_message(
                    text=f"تم حظر @{message.from_user.username} لمدة يوم بسبب تخطيه الحد الأقصى للتحذيرات."
                )
            
        except Exception as e:
            logger.error(f"فشل في حذف الرسالة المسيئة: {e}")

def main():
    """تشغيل البوت"""
    # تحميل الكلمات المسيئة
    load_bad_words()
    
    # استبدل 'TOKEN' بتوكن بوتك الخاص
    updater = Updater("TOKEN", use_context=True)
    dispatcher = updater.dispatcher
    
    # تعريف الأوامر
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("addword", add_bad_word))
    
    # معالجة الرسائل
    dispatcher.add_handler(MessageHandler(
        Filters.text | Filters.caption, 
        delete_offensive_message
    ))
    
    # بدء البوت
    updater.start_polling()
    logger.info("Bot started polling...")
    updater.idle()

if __name__ == '__main__':
    main()